// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.81.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

abstract class Native {
  Stream<List<BleDevice>> bleDiscover({required int timeout, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBleDiscoverConstMeta;

  Future<void> bleConnect({required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBleConnectConstMeta;

  Future<void> bleDisconnect({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBleDisconnectConstMeta;

  Future<AppState?> readState({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReadStateConstMeta;

  Future<void> init({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitConstMeta;

  Stream<LogEntry> createLogStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateLogStreamConstMeta;
}

class AppState {
  final SensorState sensors;

  const AppState({
    required this.sensors,
  });
}

class BleDevice {
  final String address;
  final String name;
  final bool isConnected;

  const BleDevice({
    required this.address,
    required this.name,
    required this.isConnected,
  });
}

enum Level {
  Error,
  Warn,
  Info,
  Debug,
  Trace,
}

class LogEntry {
  final int timeMillis;
  final String msg;
  final Level logLevel;
  final String lbl;

  const LogEntry({
    required this.timeMillis,
    required this.msg,
    required this.logLevel,
    required this.lbl,
  });
}

class SensorState {
  final double tempIn;
  final double tempOut;
  final double humIn;
  final double humOut;

  const SensorState({
    required this.tempIn,
    required this.tempOut,
    required this.humIn,
    required this.humOut,
  });
}
